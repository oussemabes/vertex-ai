steps:

  # Step 1: Build container image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: 
  #     - 'build'
  #     - '-t'
  #     - 'us-central1-docker.pkg.dev/$PROJECT_ID/flower-app/flower_image'
  #     - '.'

  # # Step 2: Push the container image to Artifact Registry
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/flower-app/flower_image']
  # Step 3: Create and start the pipeline
  # - name: python
  #   entrypoint: pip
  #   args: ["install", "-r", "requirements.txt", "--user"]

  # # Compile pipeline
  # - name: 'python'
  #   entrypoint: 'python'
  #   args: ['pipeline.py']
  #   id: 'compile'
  # # Copy Trained model
  # - name: 'gcr.io/cloud-builders/gsutil'
  #   args: ['cp', '-r', 'gs://first-project-413614-bucket/model/*', './trainedModel']
  # # Step 6: Build the serving container image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: 
  #     - 'build'
  #     - '-t'
  #     - 'us-central1-docker.pkg.dev/$PROJECT_ID/terrafrom/terrafrom'
  #     - './trainer'
  # # Step 7: Push the serving container image to Artifact Registry
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/terrafrom/terrafrom']
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export CLOUDSDK_COMPUTE_REGION=us-central1
        export CLOUDSDK_COMPUTE_ZONE=us-central1-c
        export CLOUDSDK_CONTAINER_CLUSTER=cluster-1
        gcloud container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER --zone $CLOUDSDK_COMPUTE_ZONE
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'create'
      - 'deployment'
      - 'model'
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/terrafrom/terrafrom'
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'expose'
      - 'deployment'
      - 'insurance-streamlit'
      - '--type=LoadBalancer'
      - '--port=80'
      - '--target-port=8501'